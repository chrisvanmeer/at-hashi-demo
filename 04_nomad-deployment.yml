---
- name: "AT Computing - HashiCorp Demo - Nomad"
  hosts: all
  become: true

  vars_files:
    - vars/hashicorp/general.yml
    - vars/hashicorp/nomad.yml

  vars:
    consul_use_bootstrap: false

  tasks:
    - name: "HashiCorp - Nomad : Ensure data directory is present."
      file:
        path: "{{ nomad_data_directory }}"
        state: directory
        mode: "0755"
        owner: "{{ nomad_data_directory_user }}"
        group: "{{ nomad_data_directory_group }}"

    - name: "HashiCorp - Nomad : Ensure data directory is present."
      file:
        path: "{{ nomad_etc_directory }}"
        state: directory
        mode: "0755"
        owner: "{{ nomad_data_directory_user }}"
        group: "{{ nomad_data_directory_group }}"

    - name: "HashiCorp - Nomad : Ensure general configuration is present."
      template:
        src: "templates/hashicorp/nomad/nomad.hcl.j2"
        dest: "{{ nomad_etc_directory }}/nomad.hcl"
        mode: "0644"
        owner: "{{ nomad_data_directory_user }}"
        group: "{{ nomad_data_directory_group }}"

    - name: "HashiCorp - Nomad : Ensure configuration is present on the server."
      template:
        src: "templates/hashicorp/nomad/server.hcl.j2"
        dest: "{{ nomad_etc_directory }}/server.hcl"
        mode: "0644"
        owner: "{{ nomad_data_directory_user }}"
        group: "{{ nomad_data_directory_group }}"
      notify: Restart Nomad
      when: ansible_hostname in groups['servers']

    - name: "HashiCorp - Nomad : Ensure configuration is present on the client."
      template:
        src: "templates/hashicorp/nomad/client.hcl.j2"
        dest: "{{ nomad_etc_directory }}/client.hcl"
        mode: "0644"
        owner: "{{ nomad_data_directory_user }}"
        group: "{{ nomad_data_directory_group }}"
      notify: Restart Nomad
      when: ansible_hostname in groups['clients']

    - name: "HashiCorp - Nomad : Ensure systemd service is present."
      template:
        src: "templates/hashicorp/nomad/nomad.service.j2"
        dest: "{{ nomad_systemd_service_file }}"
        mode: "0644"

    - name: "HashiCorp - Nomad : Ensure systemd is reloaded."
      systemd:
        daemon_reload: true

    - name: "HashiCorp - Nomad : Ensure systemd service is enabled and started."
      systemd:
        name: "{{ nomad_service_name }}"
        enabled: true
        state: started

    - name: "HashiCorp - Nomad : Take a break to allow for the servers to find each other. Keep your eye on the Consul services screen for nomad and nomad-client to go green."
      pause:
        seconds: "{{ nomad_pause_seconds }}"

    - name: "HashiCorp - Nomad - ACL : Check if system is already bootstrapped."
      stat:
        path: "{{ nomad_bootstrapped_true_file }}"
      register: nomad_bootstrapped
      when: ansible_hostname in groups['servers']
      delegate_to: "{{ groups['servers'] | first }}"
      run_once: true

    - name: "HashiCorp - Nomad - Bootstrap ACL."
      block:
        - name: "HashiCorp - Nomad - ACL : Run nomad acl bootstrap command."
          command: "{{ nomad_binary }} acl bootstrap"
          changed_when: false
          register: nomad_acl_bootstrap_raw

        - name: "HashiCorp - Nomad - ACL : Store bootstrap token local for safekeeping."
          copy:
            content: "{{ nomad_acl_bootstrap_raw.stdout }}"
            dest: "{{ nomad_bootstrap_token_local_path }}"
            mode: "0644"
          become: false
          delegate_to: localhost

        - name: "HashiCorp - Nomad - ACL : Retrieve Secret ID from bootstrap output."
          shell: "awk '/Secret ID/ {print $4}' {{ nomad_bootstrap_token_local_path }}"
          changed_when: false
          become: false
          delegate_to: localhost
          register: nomad_acl_bootstrap_output

        - name: "HashiCorp - Nomad - ACL : Set the Secret ID as a fact."
          set_fact:
            nomad_acl_bootstrap_secret_id: "{{ nomad_acl_bootstrap_output.stdout }}"

        - name: "HashiCorp - Nomad - ACL : Ensure policy file is in place."
          copy:
            src: "{{ nomad_policy_local_path }}"
            dest: "{{ nomad_policy_remote_path }}"
            mode: "0644"

        - name: "HashiCorp - Nomad - ACL : Ensure the ACL policy is registered."
          command: "{{ nomad_binary }} acl policy apply -description 'Anonymous policy (full-access)' anonymous {{ nomad_policy_remote_path }}"
          environment:
            NOMAD_TOKEN: "{{ nomad_acl_bootstrap_secret_id }}"

        - name: "HashiCorp - Nomad - ACL : Ensure bootstrap check file is in place."
          copy:
            dest: "{{ nomad_bootstrapped_true_file }}"
            content: "This cluster was bootstrapped on {{ ansible_date_time.date }} {{ ansible_date_time.time }}{{ ansible_date_time.tz }}.\n"
            mode: "0644"

        - name: "HashiCorp - Nomad - ACL : Cleanup generated files which are not needed anymore."
          file:
            path: "{{ item }}"
            state: absent
          with_items:
            - "{{ nomad_policy_remote_path }}"

      when:
        - ansible_hostname in groups['servers']
        - not nomad_bootstrapped.stat.exists
        - consul_use_bootstrap is true
      delegate_to: "{{ groups['servers'] | first }}"
      run_once: true

    - name: "HashiCorp - Nomad : Run nomad server members command."
      command: "{{ nomad_binary }} server members"
      register: nomad_server_members_ouput
      when: ansible_hostname in groups['servers']

    - name: "HashiCorp - Nomad : Ouput the results of the nomad server members command."
      debug:
        var: nomad_server_members_ouput.stdout_lines
      when: ansible_hostname in groups['servers']

    - name: "HashiCorp - Nomad : Run nomad node status command."
      command: "{{ nomad_binary }} node status"
      register: nomad_node_status_ouput
      when: ansible_hostname in groups['clients']

    - name: "HashiCorp - Nomad : Ouput the results of the nomad node status command."
      debug:
        var: nomad_node_status_ouput.stdout_lines
      when: ansible_hostname in groups['clients']

  handlers:
    - name: Restart Nomad
      service:
        name: "{{ nomad_service_name }}"
        state: restarted
